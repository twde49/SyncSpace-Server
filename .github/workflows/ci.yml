name: SyncSpace Symfony Workflow

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ develop ]

jobs:
  tests:
    name: Tests & Quality Assurance
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: [8.4]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: syncspaceuser
          POSTGRES_PASSWORD: WueUVn8B7K122zVkVtJ8F7
          POSTGRES_DB: syncspace_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U syncspaceuser"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_pgsql, pgsql, redis, opcache
          coverage: xdebug
          tools: composer:v2
      
      - name: Create .env file from .env.example
        run: cp .env.example .env
      
      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
      
      - name: Cache composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-
      
      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction --optimize-autoloader
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install Node dependencies
        run: npm ci
      
      - name: Setup test database
        run: |
          php bin/console doctrine:database:create --env=test --if-not-exists
          php bin/console doctrine:schema:create --env=test
          php bin/console doctrine:fixtures:load --env=test --no-interaction
        env:
          DATABASE_URL: postgresql://syncspaceuser:WueUVn8B7K122zVkVtJ8F7@127.0.0.1:5432/syncspace_test?serverVersion=15&charset=utf8
      
      - name: PHP CS Fixer
        run: vendor/bin/php-cs-fixer fix --allow-risky=yes --diff --verbose
      
      - name: Rector auto-fix
        run: vendor/bin/rector process

      #- name: PHPStan
      #  run: vendor/bin/phpstan analyse --memory-limit=512M
      
      #- name: PHP Unit Tests
      #  run: vendor/bin/phpunit --coverage-clover=coverage.xml
      #  env:
      #    DATABASE_URL: postgresql://syncspaceuser:WueUVn8B7K122zVkVtJ8F7@127.0.0.1:5432/syncspace_test?serverVersion=15&charset=utf8
      
      - name: Doctrine Schema Validation
        run: php bin/console doctrine:schema:validate --skip-sync
        env:
          DATABASE_URL: postgresql://syncspaceuser:WueUVn8B7K122zVkVtJ8F7@127.0.0.1:5432/syncspace_test?serverVersion=15&charset=utf8
      
      - name: Security Check
        run: php bin/console security:check
      
      - name: Upload coverage to Codecov
        if: matrix.php-version == '8.4'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}

  lint-yaml:
    name: Lint YAML files
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        run: npm install -g yaml-lint
      - name: Lint YAML files
        run: find . -name "*.yaml" -o -name "*.yml" | grep -v node_modules | xargs yamllint

  lint-docker:
    name: Lint Docker files
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          ignore: DL3008

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create .env file from .env.example
        run: cp .env.example .env
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          tools: composer:v2
      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction --optimize-autoloader
      - name: Security audit
        run: composer audit

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [tests, lint-yaml, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to production
        run: echo "Deploy to production server"
        # Ajoutez ici vos étapes de déploiement
